service: python-rest-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage}
  region: ap-south-1
  memorySize: 128
  logRetentionInDays: 1
  # deploymentMethod: direct
  deploymentBucket:
    name: ${env:AWS_DEPLOYMENT_S3}
  role: ${env:AWS_LAMBDA_ROLE}
  # vpc:
  #   securityGroupIds:
  #     - ${env:AWS_SG1}
  #   subnetIds:
  #     - ${env:AWS_SUBNET1}
  ## rest api config
  endpointType: REGIONAL
  apiGateway:
    restApiId: koawji0dhl
    # restApiRootResourceId: aww97mq4ub
    restApiRootResourceId: aww97mq4ub
    ## restApiResources: below works similar to restApiRootResourceId:
    ## 1st service has path /path2
    ## 2nd service has path /path2/v1 (this path is unique to 2nd service)
    ## if we deploy 2nd service without below restApiResources: then we get error that /path2 exists
    restApiResources:
    #   path1: uq6sba
      path2: 0wf702
      path2/v1: 1t8fxc
  tags:
    env: dev
    app: demo
  environment:
    STAGE: ${opt:stage}

# package:
#   # exclude deprecated
#   patterns:
#     - handler.py
#     - requirements.txt

plugins:
  - serverless-python-requirements
  # - serverless-package-python-functions

custom:
  pkgPyFuncs:
    buildDir: _build

functions:
  hello:
    # vpc:
    #   subnetIds:
    #     - ${env:AWS_SUBNET1}
    #   securityGroupIds:
    #     - ${env:AWS_SG1}
    name: demo-hello-world-${opt:stage}
    handler: handler.hello
    # package:
    #   include:
    #     - hello-function
    #   artifact: ${self:custom.pkgPyFuncs.buildDir}/demo-hello-world-${opt:stage}
    events:
      - http:
          path: path2/v1/u1
          method: get
  # hello2:
  #   # vpc:
  #   #   subnetIds:
  #   #     - ${env:AWS_SUBNET1}
  #   #   securityGroupIds:
  #   #     - ${env:AWS_SG1}
  #   name: demo-hello-world-v2-${opt:stage}
  #   handler: handler.hello
  #   # package:
  #   #   include:
  #   #     - hello-function
  #   #   artifact: ${self:custom.pkgPyFuncs.buildDir}/demo-hello-world-${opt:stage}
  #   events:
  #     - http:
  #         path: /path2
  #         method: get
  # dummyGet:
    # vpc:
    #   subnetIds:
    #     - ${env:AWS_SUBNET1}
    #   securityGroupIds:
    #     - ${env:AWS_SG1}
    # handler: handler.get_dummy_data
    # events:
    #   - http:
    #       path: /test
    #       method: get

# resources:
#   Outputs:
#     ApiGatewayRestApiId:
#       Value: ${self:provider.apiGateway.restApiId}

#   # Ensure the resources are only created if they don't already exist
#   Resources:
#     ApiGatewayResource:
#       Type: "AWS::ApiGateway::Resource"
#       # DependsOn: 
#       #   - ApiGatewayRestApi  # Prevents conflicts
#       Properties:
#         ParentId: ${self:provider.apiGateway.restApiRootResourceId}
#         PathPart: "path2"
#         RestApiId: ${self:provider.apiGateway.restApiId}