apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "conductor.fullName" . }}-server
  namespace: {{ .Values.namespace }}
  labels:
    # app: {{ include "conductor.name" . }}
spec:
  replicas: {{ .Values.conductorServer.replicaCount }}
  selector:
    matchLabels:
      # app: {{ include "conductor.name" . }}
      component: server
  template:
    metadata:
      labels:
        # app: {{ include "conductor.name" . }}
        component: server
    spec:
      containers:
      - name: conductor-server
        image: "{{ .Values.conductorServer.image.repository }}:{{ .Values.conductorServer.image.tag }}"
        ports:
        - containerPort: 8080
        - containerPort: 5000
        envFrom:
        - configMapRef:
            name: {{ include "conductor.fullName" . }}
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 60
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 60

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "conductor.fullName" . }}-server
  namespace: {{ .Values.namespace }}
spec:
  type: NodePort
  selector:
    # app: {{ include "conductor.name" . }}
    component: server
  ports:
    - protocol: TCP
      port: {{ .Values.conductorServer.serverPort }}
      targetPort: {{ .Values.conductorServer.serverPort }}
      {{- if .Values.conductorServer.serverNodePort }}
      nodePort: {{ .Values.conductorServer.serverNodePort }}
      {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "conductor.fullName" . }}-ui
  namespace: {{ .Values.namespace }}
spec:
  type: NodePort
  selector:
    # app: {{ include "conductor.name" . }}
    component: server
  ports:
    - protocol: TCP
      port: {{ .Values.conductorServer.uiPort }}
      targetPort: {{ .Values.conductorServer.uiPort }}
      {{- if .Values.conductorServer.uiNodePort }}
      nodePort: {{ .Values.conductorServer.uiNodePort }}
      {{- end }}

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: {{ include "conductor.fullName" . }}-jconsole
#   namespace: {{ .Values.namespace }}
# spec:
#   type: NodePort
#   selector:
#     # app: {{ include "conductor.name" . }}
#     component: server
#   ports:
#     - protocol: TCP
#       port: {{ .Values.conductorServer.jconsolePort }}
#       targetPort: {{ .Values.conductorServer.jconsolePort }}
#       {{- if .Values.conductorServer.jconsoleNodePort }}
#       nodePort: {{ .Values.conductorServer.jconsoleNodePort }}
#       {{- end }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "conductor.fullName" . }}
  namespace: {{ .Values.namespace }}
data:
    # Database persistence type.
    # Below are the properties for redis
    conductor.db.type: "redis_standalone"
    conductor.queue.type: "redis_standalone"

    conductor.redis.hosts: "{{ include "conductor.fullName" . }}-redis:{{ .Values.redis.port }}:us-east-1c"
    conductor.redis-lock.serverAddress: "redis://{{ include "conductor.fullName" . }}-redis:{{ .Values.redis.port }}"
    conductor.redis.taskDefCacheRefreshInterval: "1"
    conductor.redis.workflowNamespacePrefix: "conductor"
    conductor.redis.queueNamespacePrefix: "conductor_queues"

    conductor.workflow-execution-lock.type: "redis"
    conductor.app.workflowExecutionLockEnabled: "true"
    conductor.app.lockTimeToTry: "500"

    conductor.app.systemTaskWorkerThreadCount: "20"
    conductor.app.systemTaskMaxPollCount: "20"

    # # Elastic search instance indexing is enabled.
    conductor.indexing.enabled: "true"
    conductor.elasticsearch.url: "http://{{ include "conductor.fullName" . }}-elasticsearch:{{ .Values.elasticsearch.port }}"
    conductor.elasticsearch.indexName: "conductor"
    conductor.elasticsearch.version: "7"
    conductor.elasticsearch.clusterHealthColor: "yellow"

    conductor.metrics-logger.enabled: "true"
    conductor.metrics-logger.reportPeriodSeconds: "1"

    # Additional modules for metrics collection exposed to Prometheus (optional)
    # conductor.metrics-prometheus.enabled: "true"
    # management.endpoints.web.exposure.include: "prometheus"

    # Load sample kitchen sink workflow
    # loadSample: "true"